<!--
  Copyright (C) 2004  Naval Research Laboratory

  Permission to use, copy, modify and distribute this software and its
  documentation is hereby granted, provided that both the copyright
  notice and this permission notice appear in all copies of the software,
  derivative works or modified versions, and any portions thereof, and
  that both notices appear in supporting documentation.

  NRL ALLOWS FREE USE OF THIS SOFTWARE IN ITS "AS IS" CONDITION AND
  DISCLAIMS ANY LIABILITY OF ANY KIND FOR ANY DAMAGES WHATSOEVER
  RESULTING FROM THE USE OF THIS SOFTWARE.
-->

<project name="idol" default="signjar" basedir=".">

<!--  Name of project and version -->

<property name="Name" value="SOUSA" />
<property name="name" value="sousa" />
<property name="version" value="0.0.1" />

<!--  Directories -->

<property name="bin.dir" value="bin" />
<property name="etc.dir" value="etc" />
<property name="build.dir" value="classes" />
<property name="docs.dir" value="docs" />
<property name="javadoc.dir" value="docs/javadoc" />
<property name="ext.dir" value="ext" />
<property name="lib.dir" value="lib" />
<property name="src.dir" value="src" />
<property name="base.path" value="mil/navy/nrl/cmf/sousa" />
<property name="cmf.path" value="mil/navy/nrl/cmf/" />

<!--  Properties -->

<property name="javadoc" value="file:/afs/cmf/project/java/docs/api" />
<property name="javac.debug" value="on" /> 
<property name="javac.optimize" value="off" /> 
<!--property name="build.compiler" value="jikes" /-->
<property name="build.compiler.emacs" value="true" />
<property name="build.compiler.pedantic" value="false" />

<property file="${src.dir}/build.pass" />

<!--  Classpath -->

<path id="lib.class.path">
	<fileset dir="${ext.dir}">
		<include name="**/*.jar"/>
	</fileset>
	<fileset dir="${build.dir}"/>
</path>

<!--  Support files -->

<patternset id="support.files">
	<exclude name="**/*.keystore" />
	<exclude name="**/*.pass" />

	<include name="**/*.pnut" />
	<include name="**/*.properties" /> 
	<include name="**/*.dtd" /> 
	<include name="**/*.xml" /> 
	<include name="**/*.xslt" /> 
	<include name="**/*.jpg" /> 
	<include name="**/*.gif" /> 
</patternset>

<patternset id="filter.files">
	<include name="**/*.in" /> 
</patternset>

<!--  Tasks --> 

<target name="prepare">
	<tstamp>
		<format property="subversion" pattern="yyyy.MM.dd.hh.mm.ss" />
	</tstamp>

	<echo message="Build ${Name}-${version} (${subversion})" />

	<mkdir dir="${build.dir}" />
	<mkdir dir="${lib.dir}" />
	<mkdir dir="${lib.dir}/service" />
	<mkdir dir="${lib.dir}/user" />

	<copy todir="${build.dir}">
		<fileset dir="${src.dir}">
			<patternset refid="support.files" />
		</fileset>
	</copy>

	<copy todir="${bin.dir}">
		<fileset dir="${bin.dir}">
			<patternset refid="filter.files" />
		</fileset>

		<mapper type="glob" from="*.in" to="*"/>

		<filterset>
			<filter token="PREFIX" value="${user.dir}"/>
		</filterset>
	</copy>

	<chmod file="${bin.dir}/*" perm="ugo+rx"/>

	<copy todir="${bin.dir}/cmf">
		<fileset dir="${bin.dir}/cmf">
			<patternset refid="filter.files" />
		</fileset>

		<mapper type="glob" from="*.in" to="*"/>

		<filterset>
			<filter token="PREFIX" value="${user.dir}"/>
		</filterset>
	</copy>

	<chmod file="${bin.dir}/cmf/*" perm="ugo+rx"/>

	<copy todir="${etc.dir}/idol">
		<fileset dir="${etc.dir}/idol">
			<patternset refid="filter.files" />
		</fileset>

		<mapper type="glob" from="*.in" to="*"/>

		<filterset>
			<filter token="PREFIX" value="${user.dir}"/>
		</filterset>
	</copy>

</target>

<target name="compile" depends="prepare">
	<javac srcdir="${src.dir}"
		includes="${base.path}/*.java ${base.path}/idol/*.java ${base.path}/util/** ${base.path}/idol/util/** ${base.path}/spatiotemporal/** ${base.path}/directory/**"
		destdir="${build.dir}"
		classpathref="lib.class.path"
		debug="${javac.debug}"
		optimize="${javac.optimize}"
		depend="on"
      >

	  <!-- Enable -Xlint:unchecked if you want to know all the places where we don't catch unchecked exceptions -->
	  <!-- compilerarg value="-Xlint:unchecked" -->
		<compilerarg value="+Pno-naming-convention" compiler="jikes"/>
	</javac>

	<javac srcdir="${src.dir}"
		includes="${base.path}/idol/service/**"
		destdir="${build.dir}"
		classpathref="lib.class.path"
		debug="${javac.debug}"
		optimize="${javac.optimize}"
		depend="on"
     >

	  <!-- compilerarg value="-Xlint:unchecked" -->
		<compilerarg value="+Pno-naming-convention" compiler="jikes"/>
	</javac>

	<javac srcdir="${src.dir}"
		includes="${base.path}/idol/user/**"
		destdir="${build.dir}"
		classpathref="lib.class.path"
		debug="${javac.debug}"
		optimize="${javac.optimize}"
		depend="on"
     >

	  <!-- compilerarg value="-Xlint:unchecked" -->
		<compilerarg value="+Pno-naming-convention" compiler="jikes"/>
	</javac>

	<javac srcdir="${src.dir}"
		includes="${cmf.path}/annotation/**"
		destdir="${build.dir}"
		classpathref="lib.class.path"
		debug="${javac.debug}"
		optimize="${javac.optimize}"
		depend="on"
     >

	  <!-- compilerarg value="-Xlint:unchecked" -->
		<compilerarg value="+Pno-naming-convention" compiler="jikes"/>
	</javac>

	<javac srcdir="${src.dir}"
		includes="${cmf.path}/policy/**"
		destdir="${build.dir}"
		classpathref="lib.class.path"
		debug="${javac.debug}"
		optimize="${javac.optimize}"
		depend="on"
     >

	  <!-- compilerarg value="-Xlint:unchecked" -->
		<compilerarg value="+Pno-naming-convention" compiler="jikes"/>
	</javac>
</target>

<target name="jar" depends="compile">
	<jar destfile="${build.dir}/SOUSA.jar" basedir="${build.dir}"
		includes="log4j.properties ${base.path}/*.class ${base.path}/spatiotemporal/** ${base.path}/directory/**"
		manifest="${src.dir}/${base.path}/manifest" update="true" />

	<jar destfile="${build.dir}/SOUSA_util.jar" basedir="${build.dir}"
		includes="${base.path}/util/**"
		manifest="${src.dir}/${base.path}/manifest" update="true" />

	<jar destfile="${build.dir}/IDOL.jar" basedir="${build.dir}"
		includes="${base.path}/idol/*.class"
		manifest="${src.dir}/${base.path}/manifest" update="true" />

	<jar destfile="${build.dir}/IDOL_util.jar" basedir="${build.dir}"
		includes="${base.path}/idol/util/**"
		manifest="${src.dir}/${base.path}/manifest" update="true" />

	<jar destfile="${build.dir}/IDOL_service.jar" basedir="${build.dir}"
		includes="${base.path}/idol/service/**"
		manifest="${src.dir}/${base.path}/idol/service/manifest" update="true" />

	<jar destfile="${build.dir}/IDOL_user.jar" basedir="${build.dir}"
		includes="${base.path}/idol/user/**"
		manifest="${src.dir}/${base.path}/idol/user/manifest" update="true" />

	<jar destfile="${build.dir}/Annotation.jar" basedir="${build.dir}"
		includes="${cmf.path}/annotation/**"
		manifest="${src.dir}/${cmf.path}/annotation/manifest" update="true" />

	<jar destfile="${build.dir}/Policy.jar" basedir="${build.dir}"
		includes="${cmf.path}/policy/**"
		manifest="${src.dir}/${cmf.path}/policy/manifest" update="true" />

</target>

<target name="signjar" depends="jar">
	<signjar jar="${build.dir}/SOUSA.jar" signedjar="${lib.dir}/SOUSA.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/SOUSA_util.jar" signedjar="${lib.dir}/SOUSA_util.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/IDOL.jar" signedjar="${lib.dir}/IDOL.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/IDOL_util.jar" signedjar="${lib.dir}/IDOL_util.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/IDOL_service.jar" signedjar="${lib.dir}/service/IDOL_service.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/IDOL_user.jar" signedjar="${lib.dir}/user/IDOL_user.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/Annotation.jar" signedjar="${lib.dir}/Annotation.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />

	<signjar jar="${build.dir}/Policy.jar" signedjar="${lib.dir}/Policy.jar"
		keystore="src/source.keystore" storepass="${store.pass}" alias="DCG" keypass="${key.pass}" />
</target>

<target name="javadoc_check">
	<uptodate property="javadoc.notrequired" targetfile="${javadoc.dir}/packages.html" >
		<srcfiles dir="${src.dir}" includes="**/*.java **/package.html"/>
	</uptodate>
</target>

<target name="javadoc" depends="javadoc_check" unless="javadoc.notrequired">
	<mkdir dir="${build.dir}" /> 
	<mkdir dir="${docs.dir}" /> 
	<mkdir dir="${javadoc.dir}" /> 
	<javadoc packagenames="*" useexternalfile="yes" sourcepath="${src.dir}"
		classpathref="lib.class.path" link="${javadoc}" destdir="${javadoc.dir}"
		use="true" private="true" author="true" version="true"
		windowtitle="${Name} API" doctitle="${Name}" overview="${src.dir}/overview.html" />
</target>

<target name="doccheck">
	<mkdir dir="${javadoc.dir}/doccheck" /> 
	<javadoc packagenames="*" useexternalfile="yes" sourcepath="${src.dir}"
		docletpath="/afs/cmf/project/dc/doccheck1.2b2/doccheck.jar  "
		doclet="com.sun.tools.doclets.doccheck.DocCheck"
		additionalparam="-classlist -title &quot;the ${Name} API&quot;"
		classpathref="lib.class.path" destdir="${javadoc.dir}/doccheck"
		public="true" />
</target>

<target name="clean" depends="clean_javadoc">
	<delete dir="${build.dir}" />
	<delete dir="${lib.dir}" />
</target>

<target name="clean_javadoc">
	<delete dir="${javadoc.dir}" />
</target>
</project>
