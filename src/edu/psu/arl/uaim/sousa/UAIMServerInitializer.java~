package edu.psu.arl.uaim.sousa;

import java.util.Properties;
import java.io.*;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

import mil.navy.nrl.cmf.sousa.*;
import mil.navy.nrl.cmf.sousa.idol.service.ServerInitializer;
import mil.navy.nrl.cmf.sousa.spatiotemporal.*;
import mil.navy.nrl.cmf.sousa.util.Strings;

import org.apache.log4j.Logger;

/**
 * UAIMServerInitializer initializes an IDOL server that offers U-AIM alerts.
 * 
 */
public class UAIMServerInitializer extends ServerInitializer
{
    private static final Logger _LOG = Logger.getLogger(UAIMServerInitializer.class);
    
    // variables that will be populated from the sousa uaim.properties file
    private int    port                   = 5000;           // Default Port
    private String serverName             = "Unassigned";   // Server name created
    private String mode                   = "";
    private ObjectInputStream  objInput   = null;           // Input Stream
    private ObjectOutputStream objOutput  = null;           // Output Stream
    private DataInputStream    dataInput  = null;           // Input Stream
    private DataOutputStream   dataOutput = null;           // Output Stream
    private Socket socket;                                  // Socket that will be used
    private ServerSocket server;                            // Server Socket to accept connection
	

    /**
     * Default Constructor 
     * 
     * @param p
     * @throws EntityInitializer.InitializationException
     */
    public UAIMServerInitializer(Properties p) throws EntityInitializer.InitializationException {
        super(p);
    }
    
    /**
     * Initialize method that will initialize any fields that cannot be automatically initialized 
     * from the properties file in the constructor.
     * 
     * @param p
     * @throws EntityInitializer.InitializationException
    */
    protected void initialize_custom(Properties p) throws EntityInitializer.InitializationException {
        super.initialize_custom(p);
	
	State s = this.getState();
        //s.addField(QueryFields.QUERYABLE_FIELDNAME, _rasters);
        s.addField(QueryFields.DESCRIPTION_FIELDNAME,
                                  "Imagery");
        this.addQoSClass(QueryViewInterpreter.class);
    }
    

    /**
     * Creates a UaimServer_ControLogic
     * 
     * @param p
     * @throws EntityInitializer.InitializationException
     */
    protected ControlLogic initialize_makeControlLogic(Properties p) 
    	throws EntityInitializer.InitializationException {
 	return new UAIMServer_ControlLogic(p);
    }
    

    /** 
     * UAIMServer_ControlLogic extends the base class and handles the processing of the alerts received 
     * from the UAIM system.
     */
    public static class UAIMServer_ControlLogic extends ServerInitializer.Server_ControlLogic {
        
        private P2PChannelFactory channelFactory = null;
        private Vector channels = new Vector();

	
    	/**
    	 * Main Constructor
    	 * 
    	 * @param p 
    	 * @throws EntityInitializer.InitializationException
    	 */
	public UAIMServer_ControlLogic(Properties p) throws EntityInitializer.InitializationException {
            super(p);

            // setupSocket(p.getProperty("idol.uaim.port"), p.getProperty("idol.uaim.serverName"), p.getProperty("idol.uaim.mode"));
            try {
                int port = new Integer(p.getProperty("idol.uaim.port")).intValue();
                channelFactory = P2PChannelFactory.newInstance(port, null);
            } catch (Exception e) {
                _LOG.error("UAIMServer_ControlLogic exception e is " + e);
                e.printStackTrace();
            }
	}
		
	/**
	 * handle method processes the I/O object
	 * 
	 * @param sel
	 * @param st
	 */
	public void handle(Selectable sel, SignalType st) {
	    _LOG.debug("UAIMServer_ControlLogic handle method");
	
            if (SignalType.READ == st) {
	        _LOG.debug("UAIMServer_ControlLogic READ method");
                if (sel == channelFactory) {
	            _LOG.debug("UAIMServer_ControlLogic SELECTABLE is channel factory method");
                   // Selectable selectable = (Selectable) sel.read();
                    channels.addElement(sel);
                } else if (sel instanceof SelectableFutureResult) {
           	    _LOG.debug("UAIMServer_ControlLogic SELECTABLE is SelectableFutureResult method");
                    // do nothing - we can throw this away because we don't need to worry about it
                } else { 
	            _LOG.debug("UAIMServer_ControlLogic selectable is something we want to read method");
                    // anything else is the stuff I want to invoke READ on...
                    _LOG.debug("UAIMServer_ControlLogic handle READ signal type");            
                    Object obj = read();
                    if (obj != null) {
	                _LOG.debug("UAIMServer_ControlLogic handle method and Data = " + (String)obj);
                    } else {
            	        _LOG.debug("UAIMServer_ControlLogic handle method and Data is NULL");
                    }
                }
            } else if (SignalType.ERROR == st) {
                _LOG.debug("UAIMServer_ControlLogic handle ERROR signal type");    
                // remove it from the channels vector - this channel is no longer valid      
                channels.remove(sel); 
            } else if (SignalType.WRITE == st) {
                _LOG.debug("UAIMServer_ControlLogic handle WRITE signal type");            
            }
	}
		
	/**
	 * read method does the actual work of reading the data off the socket
	 * 
	 * @return Object - data that was read
	 */
	private Object read() {
            _LOG.debug("UAIMServer_ControlLogic read method");
	    ObjectInputStream 	objInput 	= null;         // Input Stream
	    DataInputStream 	dataInput 	= null;         // Input Stream
	    String 				mode 		= "";

	    try {
                System.out.println("mode is " + mode);
		if (!mode.equalsIgnoreCase("DATA")) {
                    System.out.println("in mode is DATA");
	            Object obj=null;
		    obj = objInput.readObject();
		    System.out.println("UAIMServer_ControlLogic read method");
		    if (obj == null) {
		        System.out.println("UAIMServer_ControlLogic read null from socket");
		        return null;
		    } else { 
                        System.out.println("UAIMServer_ControlLogic read is NOT null from socket");
                    }
		    return obj;
		} else {
                    System.out.println("in mode is NOT data");
		    byte[] b = new byte[1000];
		    String str = "";
		    boolean done = false;
		    // Read till EOF or error
		    while (!done) {
		        int len = dataInput.read(b);
		        if (len > 0) {
		            str = str + new String(b,0,len,"utf-8");
		        } else {
		            done = true;
		        }
		    }
		    
                    if (str.equals("")) {
		        return null;
		    } else {
		        return str;
		    }
	        }
	    } catch (Exception e) {
	        System.out.println("UAIMServer_ControlLogic read error  " + e.getMessage() );
                e.printStackTrace();
	    }
	    return null;
	}		  

        protected void buildSelectableSet(SelectableSet ss) {
            ss.addSelectable(channelFactory, SignalType.READ, this);
            ss.addSelectable(channelFactory, SignalType.ERROR, this);
        
            // loop selectables to be added and add them now...
            for (int i=0; i<channels.size(); i++) {
                Selectable sel = (Selectable) channels.elementAt(i);
                ss.addSelectable(sel, SignalType.READ, this);
                ss.addSelectable(sel, SignalType.ERROR, this);
            }
        }

    }
 

}
