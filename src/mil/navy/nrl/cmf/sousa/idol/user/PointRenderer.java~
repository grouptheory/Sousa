package mil.navy.nrl.cmf.sousa.idol.user;

import java.awt.Color;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import mil.navy.nrl.cmf.sousa.Field;
import mil.navy.nrl.cmf.sousa.Renderer;
import mil.navy.nrl.cmf.sousa.Renderable;
import mil.navy.nrl.cmf.sousa.State;
import mil.navy.nrl.cmf.sousa.spatiotemporal.*;
import mil.navy.nrl.cmf.sousa.util.Strings;
import mil.navy.nrl.cmf.stk.*;
import org.apache.log4j.Logger;


public final class PointRenderer extends AbstractRenderer {
	protected static final Logger _LOG = Logger.getLogger(PointRenderer.class);

	/**
	   The name of the {@link
	   mil.navy.nrl.cmf.sousa.spatiotemporal.QueryResultHandle}
	   field that contains the name of a city, coverage, model, or point
	*/
	private final String _mapnameField = "mapname";

	/**
	   The name of the QueryResultHandle field that contains the
	   latitude of a city or a model.  It's used only when the 
	   value of the {@link #_typeField} is 
	   {@link mil.navy.nrl.cmf.sousa.spatiotemporal.ServerTypeEnum#MODEL}
	   or {@link mil.navy.nrl.cmf.sousa.spatiotemporal.ServerTypeEnum#CITY}.
	*/
	private final String _modelLatitudeField = "north";

	/**
	   The name of the {@link
	   mil.navy.nrl.cmf.sousa.spatiotemporal.QueryResultHandle}
	   field that contains the
	   longitude of a city or a model.  It's used only when the 
	   value of the {@link #_typeField} is 
	   {@link mil.navy.nrl.cmf.sousa.spatiotemporal.ServerTypeEnum#MODEL}
	   or {@link mil.navy.nrl.cmf.sousa.spatiotemporal.ServerTypeEnum#CITY}.
	*/
	private final String _modelLongitudeField = "east";

	/**
	   The name of the {@link
	   mil.navy.nrl.cmf.sousa.spatiotemporal.QueryResultHandle}
	   field that contains the population of a city.  It's used
	   only when the ServerType is 
	   {@link mil.navy.nrl.cmf.sousa.spatiotemporal.ServerTypeEnum#CITY}.
	*/
	private final String _cityPopulationField = "pop";

	public PointRenderer() {}

	public void render(State.ChangeMessage msg) {
		List changes = msg.getMessages();

		for (Iterator i = changes.iterator(); i.hasNext(); ) {
			Field.ChangeMessage fnotif = (Field.ChangeMessage)i.next();
			if (RESULTS_ADDED_FIELDNAME.equals(fnotif._fname)) {
				showAdded(((Set)(fnotif._value)).iterator());
			} else if (RESULTS_REMOVED_FIELDNAME.equals(fnotif._fname)) {
				showRemoved(((Set)(fnotif._value)).iterator());
			} else if (RESULTS_CHANGED_FIELDNAME.equals(fnotif._fname)) {
				// Nothing.  Cities don't change.
			} else {
				PointRenderer._LOG.warn(new Strings(new Object[] 
					{this, 
					 ": render(): expected field",
					 RESULTS_ADDED_FIELDNAME, " or ",
					 RESULTS_REMOVED_FIELDNAME, " or ",
					 RESULTS_CHANGED_FIELDNAME, 
					 " but found ", 
					 fnotif._fname, " instead."
					}));
			}
		}
	}


	private void showAdded(Iterator it) {
		while (it.hasNext()) {
			QueryResultHandle h = (QueryResultHandle)it.next();

			PointRenderer._LOG.info(new Strings(new Object[] 
				{this, ": Added ", h}));

			addPoint(h);
		}
	}

	private void showRemoved(Iterator it) {
		while (it.hasNext()) {
			QueryResultHandle h = (QueryResultHandle)it.next();

			PointRenderer._LOG.info(new Strings(new Object[] 
				{this, ": Removed ", h}));

			removePoint(h);
		}
	}

	private void showChanged(Iterator it) {
		while (it.hasNext()) {
			QueryResultHandle h = (QueryResultHandle)it.next();

			PointRenderer._LOG.info(new Strings(new Object[] 
				{this, ": Changed ", h}));

			changePoint(h);
		}
	}

	private void addPoint(QueryResultHandle h) {
		if (null != _renderable) {
			String name = (String)h.getFieldValue(_mapnameField);
			final Vector3d position = (Vector3d)h.getFieldValue(QueryClientFields.POSITION_FIELDNAME);
			final Vector3d velocity = (Vector3d)h.getFieldValue("velocity");
			final Long time = (Long)h.getFieldValue("time");

			try {
				if (null != velocity) {
					_zui.loadfluxedmodel((String)_layers.get(ServerTypeEnum.POINT),
										 name, "sphere-blue", 0.005, 
										 (double)time.longValue(), new XYZd() {
												 // ZUI expects lon/lat/elev, position is lat/lon/elev
												 public double getX() { return position.y; }
												 public double getY() { return position.x; }
												 public double getZ() { return position.z; }
												 public void setX(double x) { }
												 public void setY(double y) { }
												 public void setZ(double z) { }
												 public void set(double x, double y, double z) { }
											 }, new XYZd() {
													 public double getX() { return velocity.y; }
													 public double getY() { return velocity.x; }
													 public double getZ() { return velocity.z; }
													 public void setX(double x) { }
													 public void setY(double y) { }
													 public void setZ(double z) { }
													 public void set(double x, double y, double z) { }
												 });
				} else {
					_zui.loaddynamicmodel((String)_layers.get(ServerTypeEnum.POINT),
										  name, "sphere-blue", 0.005, 
										  new XYZd() {
											  // ZUI expects lon/lat/elev, position is lat/lon/elev
											  public double getX() { return position.y; }
											  public double getY() { return position.x; }
											  public double getZ() { return position.z; }
											  public void setX(double x) { }
											  public void setY(double y) { }
											  public void setZ(double z) { }
											  public void set(double x, double y, double z) { }
										  });
				}
			} catch (IOException e) {
				e.printStackTrace(System.err);
			}
		}
	}


	private void removePoint(QueryResultHandle h) {
		String name = (String)h.getFieldValue(_mapnameField);

		removeObject("point", name);
	}


	private void changePoint(QueryResultHandle h) {
		if (null != _renderable) {

		}
	}
}
