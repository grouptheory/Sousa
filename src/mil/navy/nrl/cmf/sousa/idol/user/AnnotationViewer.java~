package mil.navy.nrl.cmf.sousa.idol.user;

import java.awt.BorderLayout;

import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.LinkedList;

import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumn;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;

import mil.navy.nrl.cmf.sousa.spatiotemporal.Vector3d;

/**
   AnnotationViewer
 */
final class AnnotationViewer
extends JPanel
{
	/**
	   _gui
	*/
	/*@ non_null */ private final GUI _gui;

	/**
	   _table
	*/
	private JTable _table;

	/**
	   _model
	*/
	private AnnotationViewerTableModel _model;

	/**
	   The client's current location.
	*/
	private	final Vector3d _position = new Vector3d(0.0, 0.0, 0.0);

	/**
	   _patches
	*/
	private final Map _patches = new HashMap(); // String -> Annotation

	/**
	   _patchEntries
	*/
	private final List _patchEntries = new LinkedList(); // Annotation

	// Constructors

	/**
	   AnnotationViewer(GUI)
	   @methodtype ctor
	   @param gui .
	*/
	AnnotationViewer(/*@ non_null */ GUI gui)
	{
		super();
		this._gui = gui;
		construct();
	}

	// mil.navy.nrl.cmf.idol.user.AnnotationViewer

	/**
	   addPatch(String)
	   @methodtype set
	   @param patch .
	*/
	final void
		add(/*@ non_null */ Vector3d position,
			/*@ non_null */ String text,
			/*@ non_null */ Calendar timeLowerBound,
			/*@ non_null */ Calendar timeUpperBound)
	{
		Annotation entry = new Annotation(position, text, 
										  timeLowerBound, timeUpperBound);

		// TODO: Refactor this into a method that generates the key.
		String key = position + "," + timeLowerBound.getTime().toString() +
			"," + timeUpperBound.getTime().toString();

		_patches.put(key, entry);

		_patchEntries.add(entry);

		Collections.sort(_patchEntries, new GreatCircleComparator(_position));

		// There will never be new columns, so it's OK to fire a row
		// update.
		_model.fireTableRowsUpdated(0, _patchEntries.size() - 1);
	}

	/**
	   removePatch(String)
	   @methodtype set
	   @param patch .
	*/
	final void
		remove(/*@ non_null */ Vector3d position, 
			   /*@ non_null */ Calendar timeLowerBound,
			   /*@ non_null */ Calendar timeUpperBound)
	{
		// TODO: Refactor this into a method that generates the key.
		String key = position + "," + timeLowerBound.getTime().toString() +
			"," + timeUpperBound.getTime().toString();

		Annotation entry = (Annotation)_patches.remove(key);
		_patchEntries.remove(entry);

		// There will never be new columns, so it's OK to fire a row
		// update.
		_model.fireTableRowsUpdated(0, _patchEntries.size() - 1);
	}

	/**
	   update(double, double)
	   @methodtype set
	   @param lat .
	   @param lon .
	*/
	void
		update(double lat, double lon)
	{
		synchronized (_position) {
			_position.x = lat;
			_position.y = lon;
		}

		Collections.sort(_patchEntries, new GreatCircleComparator(_position));
		_model.fireTableRowsUpdated(0, _patchEntries.size() - 1);
	}

	/**
	   update(Vector3d)
	   @methodtype set
	   @param position .
	*/
	void
		update(/*@ non_null */ Vector3d position)
	{
		synchronized (_position) {
			_position.set(position);
		}

		Collections.sort(_patchEntries, new GreatCircleComparator(_position));
		_model.fireTableRowsUpdated(0, _patchEntries.size() - 1);
	}


	// Utility

	/**
	   construct()
	   @methodtype command
	*/
	private void
		construct()
	{
		_table = new JTable(_model = new AnnotationViewerTableModel());

		_table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);

		TableColumn column = null;
		for (int i = 0; i < 3; i++) {
			column = _table.getColumnModel().getColumn(i);
			switch (i) {
			case 0: // annotation
				column.setPreferredWidth(1000);
				break;
			case 1: // position
				column.setPreferredWidth(100);
				break;
			case 2: // dates
			case 3:
				column.setPreferredWidth(200);
				break;
			default: // shouldn't happen
				// Use the default width.
				break;
			}
		}
		add(new JScrollPane(_table), BorderLayout.CENTER);
	}

	// ****************************************************************

	/**
	   Annotation
	*/
	static final class Annotation
	{

		private final String _text;
		private final Vector3d _position;
		private final Calendar _timeLowerBound;
		private final Calendar _timeUpperBound;

		// Constructors

		/**
		   Annotation(Object, Vector3d, String, Calendar, Calendar)
		   @methodtype ctor
		   @param server .
		   @param position .
		   @param text .
		   @param timeLowerBound .
		   @param timeUppererBound .

		*/
		Annotation(Vector3d position,
				   String text,
				   Calendar timeLowerBound,
				   Calendar timeUpperBound)
		{
			this._position = position;
			this._text = text;
			this._timeLowerBound = timeLowerBound;
			this._timeUpperBound = timeUpperBound;

		}
	}; // Annotation

	// ****************************************************************

	// Sorts by the great circle distance from a reference point.  Sorts
	// by elevation when the objects are the same great circle distance
	// from the reference point.
	static final class GreatCircleComparator implements Comparator {
		private final Vector3d _referencePoint;

		GreatCircleComparator(Vector3d reference) {
			_referencePoint = reference;
		}

		public int compare(Object o1, Object o2) {
			int answer = 0;
			double d1 = greatCircleDistance(_referencePoint, 
											((Annotation)o1)._position);
			double d2 = greatCircleDistance(_referencePoint, 
											((Annotation)o2)._position);

			if (d1 > d2) answer = 1;
			else if (d1 < d2) answer = -1;
			else { // o1 and o2 are the same distance from _reference.
				// Sort by elevation without regard to _reference.
				if (((Annotation)o1)._position.z > ((Annotation)o2)._position.z)
					answer = 1;
				else if (((Annotation)o1)._position.z < ((Annotation)o2)._position.z)
					answer = -1;
			}

			return answer;
		}

		// Two Comparators are equal if they are the same Comparator or if
		// they contain equal reference points.  Two reference points are
		// equal if their x values are equal and their y values are equal.
		// The z values are ignored.
		public boolean equals(Object obj) {
			boolean answer = (this == obj);
			if (! answer) {
				answer = ((_referencePoint.x == ((GreatCircleComparator)obj)._referencePoint.x) &&
						  (_referencePoint.y == ((GreatCircleComparator)obj)._referencePoint.y));
			}

			return answer;
		}

		// Calculate the great-circle distance between p1 and p2 using the
		// formula from Wikipedia:
		// http://en.wikipedia.org/wiki/Great-circle_distance
		//
		double greatCircleDistance(Vector3d p1, Vector3d p2) {
			double phi1 = Math.toRadians(p1.x);
			double lambda1 = Math.toRadians(p1.y);
			double phi2 =  Math.toRadians(p2.x);
			double lambda2 = Math.toRadians(p2.y);
			double deltaLambda = lambda1 - lambda2;

			double numerator = 
				Math.sqrt(Math.cos(phi2) * Math.sin(deltaLambda) + 
						  Math.pow((Math.cos(phi1) * Math.sin(phi2) - 
									Math.sin(phi1) * Math.cos(deltaLambda)), 2.0));
			double denominator = 
				Math.sin(phi1) * Math.sin(phi2) + 
				Math.cos(phi1) * Math.cos(phi2) * Math.cos(deltaLambda);

			double deltaSigma = Math.atan2(numerator, denominator);
			return deltaSigma;
		}
	}

	// ****************************************************************

	/**
	   AnnotationViewerTableModel
	*/
	final class AnnotationViewerTableModel
		extends AbstractTableModel
	{
		// javax.swing.table.AbstractTableModel

		public final int
			getColumnCount()
		{
			return 4;
		}

		public final int
			getRowCount()
		{
			return _patchEntries.size();
		}

		public final String
			getColumnName(int col)
		{
			switch (col) {
			case 0:
				return "Annotation";
			case 1:
				return "Position";
			case 2:
				return "Lower Date";
			case 3:
				return "Upper Date";
			default:
				return null;
			}
		}

		public final Object
			getValueAt(int row, int col)
		{
			Object answer = null;

			if (row < getRowCount()) {
				Annotation entry = (Annotation)_patchEntries.get(row);

				switch (col) {
				case 0:
					answer= entry._text;
					break;
				case 1:
					answer = entry._position;
					break;
				case 2:
					answer = entry._timeLowerBound.getTime().toString();
					break;
				case 3:
					answer = entry._timeUpperBound.getTime().toString();
					break;
				default:
					break;
				}
			}

			return answer;
		}

		public final Class
			getColumnClass(int c)
		{
			return getValueAt(0, c).getClass();
		}

		public final boolean
			isCellEditable(int row, int col)
		{
			return false;
		}

	}; // AnnotationViewerTableModel
}; // AnnotationViewer
